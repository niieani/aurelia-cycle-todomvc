// Generated by typings
// Source: node_modules/@cycle/base/lib/index.d.ts
declare module '~@cycle/rxjs-run~@cycle/base/lib/index' {
export interface Observer {
    next: (x: any) => void;
    error: (e: any) => void;
    complete: (c?: any) => void;
}
export interface HoldSubject {
    stream: any;
    observer: Observer;
}
export interface SinkProxies {
    [driverName: string]: HoldSubject;
}
export type DisposeFunction = () => void;
export type StreamSubscribe = (stream: any, observer: Observer) => DisposeFunction | void;
export interface StreamAdapter {
    adapt: (originStream: any, originStreamSubscribe: StreamSubscribe) => any;
    dispose: (sinks: any, sinkProxies: SinkProxies, sources: any) => void;
    makeHoldSubject: () => HoldSubject;
    isValidStream: (stream: any) => boolean;
    streamSubscribe: StreamSubscribe;
}
export interface DriverFunction {
    (stream: any, adapter: StreamAdapter, driverName: string): any;
    streamAdapter?: StreamAdapter;
}
export interface DriversDefinition {
    [driverName: string]: DriverFunction;
}
export interface CycleOptions {
    streamAdapter: StreamAdapter;
}
export interface CycleExecution<Sources, Sinks> {
    sources: Sources;
    sinks: Sinks;
    run: () => DisposeFunction;
}
export interface CycleSetup {
    (main: (sources: any) => any, drivers: DriversDefinition): CycleExecution<any, any>;
    run: (main: (sources: any) => any, drivers: DriversDefinition) => DisposeFunction;
}
function Cycle<Sources, Sinks>(main: (sources: Sources) => Sinks, drivers: DriversDefinition, options: CycleOptions): CycleExecution<Sources, Sinks>;
export default Cycle;
}
declare module '~@cycle/rxjs-run~@cycle/base' {
export * from '~@cycle/rxjs-run~@cycle/base/lib/index';
export { default } from '~@cycle/rxjs-run~@cycle/base/lib/index';
}

// Generated by typings
// Source: node_modules/@cycle/rxjs-run/lib/index.d.ts
declare module '@cycle/rxjs-run' {
import { DriversDefinition, CycleSetup, DisposeFunction } from '~@cycle/rxjs-run~@cycle/base';
/**
 * A function that prepares the Cycle application to be executed. Takes a `main`
 * function and prepares to circularly connects it to the given collection of
 * driver functions. As an output, `Cycle()` returns an object with three
 * properties: `sources`, `sinks` and `run`. Only when `run()` is called will
 * the application actually execute. Refer to the documentation of `run()` for
 * more details.
 *
 * **Example:**
 * ```js
 * const {sources, sinks, run} = Cycle(main, drivers);
 * // ...
 * const dispose = run(); // Executes the application
 * // ...
 * dispose();
 * ```
 *
 * @param {Function} main a function that takes `sources` as input
 * and outputs a collection of `sinks` Observables.
 * @param {Object} drivers an object where keys are driver names and values
 * are driver functions.
 * @return {Object} an object with three properties: `sources`, `sinks` and
 * `run`. `sources` is the collection of driver sources, `sinks` is the
 * collection of driver sinks, these can be used for debugging or testing. `run`
 * is the function that once called will execute the application.
 * @function Cycle
 */
const Cycle: CycleSetup;
/**
 * Takes a `main` function and circularly connects it to the given collection
 * of driver functions.
 *
 * **Example:**
 * ```js
 * const dispose = Cycle.run(main, drivers);
 * // ...
 * dispose();
 * ```
 *
 * The `main` function expects a collection of "source" Observables (returned
 * from drivers) as input, and should return a collection of "sink" Observables
 * (to be given to drivers). A "collection of Observables" is a JavaScript
 * object where keys match the driver names registered by the `drivers` object,
 * and values are the Observables. Refer to the documentation of each driver to
 * see more details on what types of sources it outputs and sinks it receives.
 *
 * @param {Function} main a function that takes `sources` as input
 * and outputs a collection of `sinks` Observables.
 * @param {Object} drivers an object where keys are driver names and values
 * are driver functions.
 * @return {Function} a dispose function, used to terminate the execution of the
 * Cycle.js program, cleaning up resources used.
 * @function run
 */
export function run<Sources, Sinks>(main: (sources: Sources) => Sinks, drivers: DriversDefinition): DisposeFunction;
export default Cycle;
}
